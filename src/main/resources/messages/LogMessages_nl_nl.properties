# Comments indicate the order in which parameters will be passed in. Process assertions relies on SLF4J's message formatting, 
# which means parameters are always substituted in the same order, so the message must contain {} placeholders for the parameters
# in the designated order.

#processInstanceId
process.1=Controleren dat proces instantie met id '{}' actief is

#processInstanceId
process.2=Controleren dat proces instantie met id '{}' kan worden gevonden

#processInstanceId
process.3=Controleren dat historische proces instantie met id '{}' kan worden gevonden en niet beëindigd is

#processInstanceId
process.4=Controleren dat historische proces instantie met id '{}' kan worden gevonden en beëindigd is

#processInstanceId
process.5=Controleren dat proces instantie met id '{}' beëindigd is

#processInstanceId
process.6=Controleren dat er geen lopende proces instantie is met id '{}'

#processInstanceId
process.7=Controleren dat proces instantie met id '{}' niet beëindigd is

#processInstanceId
process.8=Controleren dat proces instantie met id '{}' niet opgeschort is

#taskDefinitionKey, processInstanceId
task.1=Controleren dat er een taak instantie onvoltooid is met taskDefinitionKey '{}' in proces instantie met id '{}'

#taskInstanceId
task.2=Controleren dat de taak met id '{}' onvoltooid is

#failureMessage
error.assertions.1=De process assertions falen: {}

#processInstanceId
error.process.1=De proces instantie met id '{}' is niet actief

#processInstanceId
error.process.2=De proces instantie met id '{}' is niet beëindigd

#taskDefinitionKey, processInstanceId
error.task.1=Er is geen taak instantie met definition key '{}' die onvoltooid is in de proces instantie met id '{}'

#taskInstanceId
error.task.2=De taak met id '{}' is niet onvoltooid